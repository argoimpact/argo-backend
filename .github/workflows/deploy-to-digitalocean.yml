name: Deploy to DigitalOcean Droplet

on:
  workflow_run:
    workflows: ["Build and Publish Docker Images"]
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  APP_DIR: /var/lib/argo-docker-compose

jobs:
  deploy:
    environment: beta
    runs-on: ubuntu-latest

    steps:
      - name: Check outcome of triggered workflow
        if: ${{ github.event.workflow_run.conclusion != 'success' }}
        run: |
          echo "The triggering workflow failed. Deployment will not proceed."
          exit 1

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: ssh docker compose
        env:
          APP_DIR: ${{ env.APP_DIR }}
          SSH_KEY: ${{ secrets.DROPLET_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Optional: Disable host key checking (for automation purposes)
          echo "Host *" > ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config
          echo "    UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 644 ~/.ssh/config

          REMOTE_USER=${{ secrets.DROPLET_USER }}
          REMOTE_HOST=${{ secrets.DROPLET_IP }}
          REMOTE_PATH=${{ env.APP_DIR }}
          LOCAL_FILE_PATH="./docker-compose.yml"

          scp $LOCAL_FILE_PATH ${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}

      - name: Deploy to Droplet
        env:
          APP_DIR: ${{ env.APP_DIR }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          CLERK_SECRET: ${{ secrets.CLERK_SECRET }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          port: 22
          script: |
            set -e # Exit if something returns a non-zero status
            cd ${{ env.APP_DIR }}

            # set environment variables in the script
            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}
            export CLERK_SECRET=${{ env.CLERK_SECRET }}

            docker login ghcr.io -u ${{ github.actor }} --password-stdin <<< ${{ secrets.GITHUB_TOKEN }}

            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ env.IMAGE_TAG }} # Pull the latest version of your app service image

            docker compose down # Take down the current containers
            docker compose up -d # Start the containers in detached mode

            echo "Application and Redis services are up and running!"
